
[4mSequelize CLI [Node: 10.16.0, CLI: 5.5.1, ORM: 5.21.5][24m

Loaded configuration file "db/config/config.js".
Using environment "development".
== 20200315170527-create-user-table: migrating =======
{ [Function: Sequelize]
  version: '5.21.5',
  options: { hooks: {} },
  Utils:
   { classToInvokable: [Function: classToInvokable],
     Promise:
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.7.2',
        coroutine: [Function],
        spawn: [Function],
        map: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        allSettled: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        delay: [Function],
        using: [Function],
        any: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        filter: [Function],
        default: [Circular] },
     useInflection: [Function: useInflection],
     camelizeIf: [Function: camelizeIf],
     underscoredIf: [Function: underscoredIf],
     isPrimitive: [Function: isPrimitive],
     mergeDefaults: [Function: mergeDefaults],
     merge: [Function: merge],
     spliceStr: [Function: spliceStr],
     camelize: [Function: camelize],
     underscore: [Function: underscore],
     singularize: [Function: singularize],
     pluralize: [Function: pluralize],
     format: [Function: format],
     formatNamedParameters: [Function: formatNamedParameters],
     cloneDeep: [Function: cloneDeep],
     mapFinderOptions: [Function: mapFinderOptions],
     mapOptionFieldNames: [Function: mapOptionFieldNames],
     mapWhereFieldNames: [Function: mapWhereFieldNames],
     mapValueFieldNames: [Function: mapValueFieldNames],
     isColString: [Function: isColString],
     canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
     combineTableNames: [Function: combineTableNames],
     toDefaultValue: [Function: toDefaultValue],
     defaultValueSchemable: [Function: defaultValueSchemable],
     removeNullValuesFromHash: [Function: removeNullValuesFromHash],
     stack: [Function: stack],
     now: [Function: now],
     TICK_CHAR: '`',
     addTicks: [Function: addTicks],
     removeTicks: [Function: removeTicks],
     flattenObjectDeep: [Function: flattenObjectDeep],
     SequelizeMethod: [Function: SequelizeMethod],
     Fn: [Function: Fn],
     Col: [Function: Col],
     Cast: [Function: Cast],
     Literal: [Function: Literal],
     Json: [Function: Json],
     Where: [Function: Where],
     getOperators: [Function: getOperators],
     getComplexKeys: [Function: getComplexKeys],
     getComplexSize: [Function: getComplexSize],
     isWhereEmpty: [Function: isWhereEmpty],
     generateEnumName: [Function: generateEnumName],
     camelizeObjectKeys: [Function: camelizeObjectKeys],
     defaults: [Function: defaults],
     nameIndex: [Function: nameIndex],
     intersects: [Function: intersects] },
  Op:
   { eq: Symbol(eq),
     ne: Symbol(ne),
     gte: Symbol(gte),
     gt: Symbol(gt),
     lte: Symbol(lte),
     lt: Symbol(lt),
     not: Symbol(not),
     is: Symbol(is),
     in: Symbol(in),
     notIn: Symbol(notIn),
     like: Symbol(like),
     notLike: Symbol(notLike),
     iLike: Symbol(iLike),
     notILike: Symbol(notILike),
     startsWith: Symbol(startsWith),
     endsWith: Symbol(endsWith),
     substring: Symbol(substring),
     regexp: Symbol(regexp),
     notRegexp: Symbol(notRegexp),
     iRegexp: Symbol(iRegexp),
     notIRegexp: Symbol(notIRegexp),
     between: Symbol(between),
     notBetween: Symbol(notBetween),
     overlap: Symbol(overlap),
     contains: Symbol(contains),
     contained: Symbol(contained),
     adjacent: Symbol(adjacent),
     strictLeft: Symbol(strictLeft),
     strictRight: Symbol(strictRight),
     noExtendRight: Symbol(noExtendRight),
     noExtendLeft: Symbol(noExtendLeft),
     and: Symbol(and),
     or: Symbol(or),
     any: Symbol(any),
     all: Symbol(all),
     values: Symbol(values),
     col: Symbol(col),
     placeholder: Symbol(placeholder),
     join: Symbol(join) },
  Promise:
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: [Function],
     Promise: [Circular],
     version: '3.7.2',
     coroutine: { [Function] addYieldHandler: [Function] },
     spawn: [Function],
     map: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: [Function],
     settle: [Function],
     allSettled: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     delay: [Function],
     using: [Function],
     any: [Function],
     each: [Function],
     mapSeries: [Function: PromiseMapSeries],
     filter: [Function],
     default: [Circular] },
  TableHints:
   { NOLOCK: 'NOLOCK',
     READUNCOMMITTED: 'READUNCOMMITTED',
     UPDLOCK: 'UPDLOCK',
     REPEATABLEREAD: 'REPEATABLEREAD',
     SERIALIZABLE: 'SERIALIZABLE',
     READCOMMITTED: 'READCOMMITTED',
     TABLOCK: 'TABLOCK',
     TABLOCKX: 'TABLOCKX',
     PAGLOCK: 'PAGLOCK',
     ROWLOCK: 'ROWLOCK',
     NOWAIT: 'NOWAIT',
     READPAST: 'READPAST',
     XLOCK: 'XLOCK',
     SNAPSHOT: 'SNAPSHOT',
     NOEXPAND: 'NOEXPAND' },
  IndexHints: { USE: 'USE', FORCE: 'FORCE', IGNORE: 'IGNORE' },
  Transaction:
   { [Function: Transaction] Transaction: [Circular], default: [Circular] },
  QueryTypes:
   { SELECT: 'SELECT',
     INSERT: 'INSERT',
     UPDATE: 'UPDATE',
     BULKUPDATE: 'BULKUPDATE',
     BULKDELETE: 'BULKDELETE',
     DELETE: 'DELETE',
     UPSERT: 'UPSERT',
     VERSION: 'VERSION',
     SHOWTABLES: 'SHOWTABLES',
     SHOWINDEXES: 'SHOWINDEXES',
     DESCRIBE: 'DESCRIBE',
     RAW: 'RAW',
     FOREIGNKEYS: 'FOREIGNKEYS',
     SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
  Validator:
   { version: '10.11.0',
     toDate: { [Function: toDate] default: [Circular] },
     toFloat: { [Function: toFloat] default: [Circular] },
     toInt: { [Function: toInt] default: [Circular] },
     toBoolean: { [Function: toBoolean] default: [Circular] },
     equals: { [Function: equals] default: [Circular] },
     contains: [Function: contains],
     matches: { [Function: matches] default: [Circular] },
     isEmail: { [Function: isEmail] default: [Circular] },
     isURL: { [Function: isURL] default: [Circular] },
     isMACAddress: { [Function: isMACAddress] default: [Circular] },
     isIP: { [Function: isIP] default: [Circular] },
     isIPRange: { [Function: isIPRange] default: [Circular] },
     isFQDN: { [Function: isFQDN] default: [Circular] },
     isBoolean: { [Function: isBoolean] default: [Circular] },
     isAlpha: [Function: isAlpha],
     isAlphaLocales:
      [ 'en-US',
        'bg-BG',
        'cs-CZ',
        'da-DK',
        'de-DE',
        'el-GR',
        'es-ES',
        'fr-FR',
        'it-IT',
        'nb-NO',
        'nl-NL',
        'nn-NO',
        'hu-HU',
        'pl-PL',
        'pt-PT',
        'ru-RU',
        'sl-SI',
        'sk-SK',
        'sr-RS@latin',
        'sr-RS',
        'sv-SE',
        'tr-TR',
        'uk-UA',
        'ku-IQ',
        'ar',
        'en-AU',
        'en-GB',
        'en-HK',
        'en-IN',
        'en-NZ',
        'en-ZA',
        'en-ZM',
        'ar-AE',
        'ar-BH',
        'ar-DZ',
        'ar-EG',
        'ar-IQ',
        'ar-JO',
        'ar-KW',
        'ar-LB',
        'ar-LY',
        'ar-MA',
        'ar-QM',
        'ar-QA',
        'ar-SA',
        'ar-SD',
        'ar-SY',
        'ar-TN',
        'ar-YE',
        'pt-BR',
        'pl-Pl' ],
     isAlphanumeric: [Function: isAlphanumeric],
     isAlphanumericLocales:
      [ 'en-US',
        'bg-BG',
        'cs-CZ',
        'da-DK',
        'de-DE',
        'el-GR',
        'es-ES',
        'fr-FR',
        'it-IT',
        'hu-HU',
        'nb-NO',
        'nl-NL',
        'nn-NO',
        'pl-PL',
        'pt-PT',
        'ru-RU',
        'sl-SI',
        'sk-SK',
        'sr-RS@latin',
        'sr-RS',
        'sv-SE',
        'tr-TR',
        'uk-UA',
        'ku-IQ',
        'ar',
        'en-AU',
        'en-GB',
        'en-HK',
        'en-IN',
        'en-NZ',
        'en-ZA',
        'en-ZM',
        'ar-AE',
        'ar-BH',
        'ar-DZ',
        'ar-EG',
        'ar-IQ',
        'ar-JO',
        'ar-KW',
        'ar-LB',
        'ar-LY',
        'ar-MA',
        'ar-QM',
        'ar-QA',
        'ar-SA',
        'ar-SD',
        'ar-SY',
        'ar-TN',
        'ar-YE',
        'pt-BR',
        'pl-Pl' ],
     isNumeric: { [Function: isNumeric] default: [Circular] },
     isPort: { [Function: isPort] default: [Circular] },
     isLowercase: { [Function: isLowercase] default: [Circular] },
     isUppercase: { [Function: isUppercase] default: [Circular] },
     isAscii: { [Function: isAscii] default: [Circular] },
     isFullWidth: [Function: isFullWidth],
     isHalfWidth: [Function: isHalfWidth],
     isVariableWidth: { [Function: isVariableWidth] default: [Circular] },
     isMultibyte: { [Function: isMultibyte] default: [Circular] },
     isSurrogatePair: { [Function: isSurrogatePair] default: [Circular] },
     isInt: { [Function: isInt] default: [Circular] },
     isFloat: [Function: isFloat],
     isFloatLocales:
      [ 'en-US',
        'ar',
        'en-AU',
        'en-GB',
        'en-HK',
        'en-IN',
        'en-NZ',
        'en-ZA',
        'en-ZM',
        'ar-AE',
        'ar-BH',
        'ar-DZ',
        'ar-EG',
        'ar-IQ',
        'ar-JO',
        'ar-KW',
        'ar-LB',
        'ar-LY',
        'ar-MA',
        'ar-QM',
        'ar-QA',
        'ar-SA',
        'ar-SD',
        'ar-SY',
        'ar-TN',
        'ar-YE',
        'bg-BG',
        'cs-CZ',
        'da-DK',
        'de-DE',
        'el-GR',
        'es-ES',
        'fr-FR',
        'it-IT',
        'ku-IQ',
        'hu-HU',
        'nb-NO',
        'nn-NO',
        'nl-NL',
        'pl-PL',
        'pt-PT',
        'ru-RU',
        'sl-SI',
        'sr-RS@latin',
        'sr-RS',
        'sv-SE',
        'tr-TR',
        'uk-UA',
        'pt-BR',
        'pl-Pl' ],
     isDecimal: [Function: isDecimal],
     isHexadecimal: { [Function: isHexadecimal] default: [Circular] },
     isDivisibleBy: { [Function: isDivisibleBy] default: [Circular] },
     isHexColor: { [Function: isHexColor] default: [Circular] },
     isISRC: { [Function: isISRC] default: [Circular] },
     isMD5: { [Function: isMD5] default: [Circular] },
     isHash: { [Function: isHash] default: [Circular] },
     isJWT: { [Function: isJWT] default: [Circular] },
     isJSON: { [Function: isJSON] default: [Circular] },
     isEmpty: { [Function: isEmpty] default: [Circular] },
     isLength: { [Function: isLength] default: [Circular] },
     isByteLength: { [Function: isByteLength] default: [Circular] },
     isUUID: { [Function: isUUID] default: [Circular] },
     isMongoId: { [Function: isMongoId] default: [Circular] },
     isAfter: { [Function: isAfter] default: [Circular] },
     isBefore: { [Function: isBefore] default: [Circular] },
     isIn: { [Function: isIn] default: [Circular] },
     isCreditCard: { [Function: isCreditCard] default: [Circular] },
     isIdentityCard: { [Function: isIdentityCard] default: [Circular] },
     isISIN: { [Function: isISIN] default: [Circular] },
     isISBN: { [Function: isISBN] default: [Circular] },
     isISSN: { [Function: isISSN] default: [Circular] },
     isMobilePhone: [Function: isMobilePhone],
     isMobilePhoneLocales:
      [ 'ar-AE',
        'ar-DZ',
        'ar-EG',
        'ar-IQ',
        'ar-JO',
        'ar-KW',
        'ar-SA',
        'ar-SY',
        'ar-TN',
        'be-BY',
        'bg-BG',
        'bn-BD',
        'cs-CZ',
        'da-DK',
        'de-DE',
        'el-GR',
        'en-AU',
        'en-GB',
        'en-GH',
        'en-HK',
        'en-IE',
        'en-IN',
        'en-KE',
        'en-MU',
        'en-NG',
        'en-NZ',
        'en-PK',
        'en-RW',
        'en-SG',
        'en-TZ',
        'en-UG',
        'en-US',
        'en-ZA',
        'en-ZM',
        'es-ES',
        'es-MX',
        'es-UY',
        'et-EE',
        'fa-IR',
        'fi-FI',
        'fo-FO',
        'fr-FR',
        'he-IL',
        'hu-HU',
        'id-ID',
        'it-IT',
        'ja-JP',
        'kk-KZ',
        'kl-GL',
        'ko-KR',
        'lt-LT',
        'ms-MY',
        'nb-NO',
        'nl-BE',
        'nn-NO',
        'pl-PL',
        'pt-BR',
        'pt-PT',
        'ro-RO',
        'ru-RU',
        'sl-SI',
        'sk-SK',
        'sr-RS',
        'sv-SE',
        'th-TH',
        'tr-TR',
        'uk-UA',
        'vi-VN',
        'zh-CN',
        'zh-TW',
        'en-CA',
        'fr-BE',
        'zh-HK' ],
     isPostalCode: [Function: _default],
     isPostalCodeLocales:
      [ 'AD',
        'AT',
        'AU',
        'BE',
        'BG',
        'CA',
        'CH',
        'CZ',
        'DE',
        'DK',
        'DZ',
        'EE',
        'ES',
        'FI',
        'FR',
        'GB',
        'GR',
        'HR',
        'HU',
        'IL',
        'IN',
        'IS',
        'IT',
        'JP',
        'KE',
        'LI',
        'LT',
        'LU',
        'LV',
        'MX',
        'NL',
        'NO',
        'PL',
        'PT',
        'RO',
        'RU',
        'SA',
        'SE',
        'SI',
        'SK',
        'TN',
        'TW',
        'UA',
        'US',
        'ZA',
        'ZM' ],
     isCurrency: { [Function: isCurrency] default: [Circular] },
     isISO8601: { [Function: isISO8601] default: [Circular] },
     isRFC3339: { [Function: isRFC3339] default: [Circular] },
     isISO31661Alpha2: { [Function: isISO31661Alpha2] default: [Circular] },
     isISO31661Alpha3: { [Function: isISO31661Alpha3] default: [Circular] },
     isBase64: { [Function: isBase64] default: [Circular] },
     isDataURI: { [Function: isDataURI] default: [Circular] },
     isMagnetURI: { [Function: isMagnetURI] default: [Circular] },
     isMimeType: { [Function: isMimeType] default: [Circular] },
     isLatLong: { [Function: _default] default: [Circular] },
     ltrim: { [Function: ltrim] default: [Circular] },
     rtrim: { [Function: rtrim] default: [Circular] },
     trim: { [Function: trim] default: [Circular] },
     escape: { [Function: escape] default: [Circular] },
     unescape: { [Function: unescape] default: [Circular] },
     stripLow: { [Function: stripLow] default: [Circular] },
     whitelist: { [Function: whitelist] default: [Circular] },
     blacklist: { [Function: blacklist] default: [Circular] },
     isWhitelisted: { [Function: isWhitelisted] default: [Circular] },
     normalizeEmail: { [Function: normalizeEmail] default: [Circular] },
     toString: { [Function: toString] default: [Circular] },
     default: [Circular],
     isImmutable: [Function],
     notNull: [Function],
     extend: [Function: extend],
     notEmpty: [Function: notEmpty],
     len: [Function: len],
     isUrl: [Function: isUrl],
     isIPv6: [Function: isIPv6],
     isIPv4: [Function: isIPv4],
     notIn: [Function: notIn],
     regex: [Function: regex],
     notRegex: [Function: notRegex],
     min: [Function: min],
     max: [Function: max],
     not: [Function: not],
     notContains: [Function: notContains],
     is: [Function: is],
     isNull: { [Function: isEmpty] default: [Circular] },
     isDate: [Function] },
  Model: Model,
  DataTypes:
   { ABSTRACT: { [Function: ABSTRACT] types: {}, key: 'ABSTRACT' },
     STRING: { [Function: STRING] types: [Object], key: 'STRING' },
     CHAR: { [Function: CHAR] types: [Object], key: 'CHAR' },
     TEXT: { [Function: TEXT] types: [Object], key: 'TEXT' },
     NUMBER: { [Function: NUMBER] types: {}, key: 'NUMBER' },
     TINYINT: { [Function: TINYINT] types: [Object], key: 'TINYINT' },
     SMALLINT: { [Function: SMALLINT] types: [Object], key: 'SMALLINT' },
     MEDIUMINT: { [Function: MEDIUMINT] types: [Object], key: 'MEDIUMINT' },
     INTEGER: { [Function: INTEGER] types: [Object], key: 'INTEGER' },
     BIGINT: { [Function: BIGINT] types: [Object], key: 'BIGINT' },
     FLOAT: { [Function: FLOAT] types: [Object], key: 'FLOAT' },
     TIME: { [Function: TIME] types: [Object], key: 'TIME' },
     DATE: { [Function: DATE] types: [Object], key: 'DATE' },
     DATEONLY: { [Function: DATEONLY] types: [Object], key: 'DATEONLY' },
     BOOLEAN:
      { [Function: BOOLEAN] parse: [Function: _sanitize], types: [Object], key: 'BOOLEAN' },
     NOW: { [Function: NOW] types: {}, key: 'NOW' },
     BLOB: { [Function: BLOB] types: [Object], key: 'BLOB' },
     DECIMAL: { [Function: DECIMAL] types: [Object], key: 'DECIMAL' },
     NUMERIC: { [Function: DECIMAL] types: [Object], key: 'DECIMAL' },
     UUID: { [Function: UUID] types: [Object], key: 'UUID' },
     UUIDV1: { [Function: UUIDV1] types: {}, key: 'UUIDV1' },
     UUIDV4: { [Function: UUIDV4] types: {}, key: 'UUIDV4' },
     HSTORE: { [Function: HSTORE] types: [Object], key: 'HSTORE' },
     JSON: { [Function: JSONTYPE] types: [Object], key: 'JSON' },
     JSONB: { [Function: JSONB] types: [Object], key: 'JSONB' },
     VIRTUAL: { [Function: VIRTUAL] types: {}, key: 'VIRTUAL' },
     ARRAY: { [Function: ARRAY] types: {}, key: 'ARRAY' },
     ENUM: { [Function: ENUM] types: [Object], key: 'ENUM' },
     RANGE: { [Function: RANGE] types: [Object], key: 'RANGE' },
     REAL: { [Function: REAL] types: [Object], key: 'REAL' },
     'DOUBLE PRECISION':
      { [Function: DOUBLE] types: [Object], key: 'DOUBLE PRECISION' },
     DOUBLE:
      { [Function: DOUBLE] types: [Object], key: 'DOUBLE PRECISION' },
     GEOMETRY: { [Function: GEOMETRY] types: [Object], key: 'GEOMETRY' },
     GEOGRAPHY: { [Function: GEOGRAPHY] types: [Object], key: 'GEOGRAPHY' },
     CIDR: { [Function: CIDR] types: [Object], key: 'CIDR' },
     INET: { [Function: INET] types: [Object], key: 'INET' },
     MACADDR: { [Function: MACADDR] types: [Object], key: 'MACADDR' },
     CITEXT: { [Function: CITEXT] types: [Object], key: 'CITEXT' },
     postgres:
      { DECIMAL: [Function: DECIMAL],
        BLOB: [Function: BLOB],
        STRING: [Function: STRING],
        CHAR: [Function: CHAR],
        TEXT: [Function: TEXT],
        CITEXT: [Function: CITEXT],
        TINYINT: [Function: TINYINT],
        SMALLINT: [Function: SMALLINT],
        INTEGER: [Function],
        BIGINT: [Function: BIGINT],
        BOOLEAN: [Function],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        REAL: [Function: REAL],
        'DOUBLE PRECISION': [Function: DOUBLE],
        FLOAT: [Function: FLOAT],
        GEOMETRY: [Function: GEOMETRY],
        GEOGRAPHY: [Function: GEOGRAPHY],
        HSTORE: [Function: HSTORE],
        RANGE: [Function: RANGE],
        ENUM: [Function: ENUM] },
     mysql:
      { ENUM: [Function: ENUM],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        UUID: [Function: UUID],
        GEOMETRY: [Function: GEOMETRY],
        DECIMAL: [Function: DECIMAL],
        JSON: [Function: JSONTYPE] },
     mariadb:
      { ENUM: [Function: ENUM],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        UUID: [Function: UUID],
        GEOMETRY: [Function: GEOMETRY],
        DECIMAL: [Function: DECIMAL],
        JSON: [Function: JSONTYPE] },
     sqlite:
      { DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        STRING: [Function: STRING],
        CHAR: [Function: CHAR],
        NUMBER: [Function: NUMBER],
        FLOAT: [Function],
        REAL: [Function],
        'DOUBLE PRECISION': [Function],
        TINYINT: [Function: TINYINT],
        SMALLINT: [Function: SMALLINT],
        MEDIUMINT: [Function: MEDIUMINT],
        INTEGER: [Function: INTEGER],
        BIGINT: [Function: BIGINT],
        TEXT: [Function: TEXT],
        ENUM: [Function: ENUM],
        JSON: [Function: JSONTYPE],
        CITEXT: [Function: CITEXT] },
     mssql:
      { BLOB: [Function: BLOB],
        BOOLEAN: [Function: BOOLEAN],
        ENUM: [Function: ENUM],
        STRING: [Function: STRING],
        UUID: [Function: UUID],
        DATE: [Function: DATE],
        DATEONLY: [Function: DATEONLY],
        NOW: [Function: NOW],
        TINYINT: [Function: TINYINT],
        SMALLINT: [Function: SMALLINT],
        INTEGER: [Function: INTEGER],
        BIGINT: [Function: BIGINT],
        REAL: [Function: REAL],
        FLOAT: [Function: FLOAT],
        TEXT: [Function: TEXT] } },
  ABSTRACT: { [Function: ABSTRACT] types: {}, key: 'ABSTRACT' },
  STRING:
   { [Function: STRING]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'STRING' },
  CHAR:
   { [Function: CHAR]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'CHAR' },
  TEXT:
   { [Function: TEXT]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: false },
     key: 'TEXT' },
  NUMBER: { [Function: NUMBER] types: {}, key: 'NUMBER' },
  TINYINT:
   { [Function: TINYINT]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'TINYINT' },
  SMALLINT:
   { [Function: SMALLINT]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'SMALLINT' },
  MEDIUMINT:
   { [Function: MEDIUMINT]
     types:
      { mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: false },
     key: 'MEDIUMINT' },
  INTEGER:
   { [Function: INTEGER]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'INTEGER' },
  BIGINT:
   { [Function: BIGINT]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: false },
     key: 'BIGINT' },
  FLOAT:
   { [Function: FLOAT]
     types:
      { mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'FLOAT' },
  TIME:
   { [Function: TIME]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'TIME' },
  DATE:
   { [Function: DATE]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'DATE' },
  DATEONLY:
   { [Function: DATEONLY]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'DATEONLY' },
  BOOLEAN:
   { [Function: BOOLEAN]
     parse: [Function: _sanitize],
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'BOOLEAN' },
  NOW: { [Function: NOW] types: {}, key: 'NOW' },
  BLOB:
   { [Function: BLOB]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'BLOB' },
  DECIMAL:
   { [Function: DECIMAL]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'DECIMAL' },
  NUMERIC:
   { [Function: DECIMAL]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'DECIMAL' },
  UUID:
   { [Function: UUID]
     types:
      { postgres: [Array],
        mysql: false,
        mariadb: false,
        sqlite: [Array],
        mssql: false },
     key: 'UUID' },
  UUIDV1: { [Function: UUIDV1] types: {}, key: 'UUIDV1' },
  UUIDV4: { [Function: UUIDV4] types: {}, key: 'UUIDV4' },
  HSTORE:
   { [Function: HSTORE] types: { postgres: [Array] }, key: 'HSTORE' },
  JSON:
   { [Function: JSONTYPE]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array] },
     key: 'JSON' },
  JSONB:
   { [Function: JSONB] types: { postgres: [Array] }, key: 'JSONB' },
  VIRTUAL: { [Function: VIRTUAL] types: {}, key: 'VIRTUAL' },
  ARRAY: { [Function: ARRAY] types: {}, key: 'ARRAY' },
  ENUM:
   { [Function: ENUM]
     types:
      { postgres: [Array],
        mysql: false,
        mariadb: false,
        sqlite: false,
        mssql: false },
     key: 'ENUM' },
  RANGE:
   { [Function: RANGE] types: { postgres: [Object] }, key: 'RANGE' },
  REAL:
   { [Function: REAL]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'REAL' },
  'DOUBLE PRECISION':
   { [Function: DOUBLE]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'DOUBLE PRECISION' },
  DOUBLE:
   { [Function: DOUBLE]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: [Array],
        mssql: [Array] },
     key: 'DOUBLE PRECISION' },
  GEOMETRY:
   { [Function: GEOMETRY]
     types:
      { postgres: [Array],
        mysql: [Array],
        mariadb: [Array],
        sqlite: false,
        mssql: false },
     key: 'GEOMETRY' },
  GEOGRAPHY:
   { [Function: GEOGRAPHY] types: { postgres: [Array] }, key: 'GEOGRAPHY' },
  CIDR:
   { [Function: CIDR] types: { postgres: [Array] }, key: 'CIDR' },
  INET:
   { [Function: INET] types: { postgres: [Array] }, key: 'INET' },
  MACADDR:
   { [Function: MACADDR] types: { postgres: [Array] }, key: 'MACADDR' },
  CITEXT:
   { [Function: CITEXT] types: { postgres: [Array] }, key: 'CITEXT' },
  postgres:
   { DECIMAL: [Function: DECIMAL],
     BLOB: [Function: BLOB],
     STRING: [Function: STRING],
     CHAR: [Function: CHAR],
     TEXT: [Function: TEXT],
     CITEXT: [Function: CITEXT],
     TINYINT: [Function: TINYINT],
     SMALLINT: [Function: SMALLINT],
     INTEGER: { [Function: INTEGER] parse: [Function: parse] },
     BIGINT: [Function: BIGINT],
     BOOLEAN: { [Function: BOOLEAN] parse: [Function: _sanitize] },
     DATE: [Function: DATE],
     DATEONLY: [Function: DATEONLY],
     REAL: [Function: REAL],
     'DOUBLE PRECISION': [Function: DOUBLE],
     FLOAT: [Function: FLOAT],
     GEOMETRY: [Function: GEOMETRY],
     GEOGRAPHY: [Function: GEOGRAPHY],
     HSTORE: [Function: HSTORE],
     RANGE: [Function: RANGE],
     ENUM: [Function: ENUM] },
  mysql:
   { ENUM: [Function: ENUM],
     DATE: [Function: DATE],
     DATEONLY: [Function: DATEONLY],
     UUID: [Function: UUID],
     GEOMETRY: [Function: GEOMETRY],
     DECIMAL: [Function: DECIMAL],
     JSON: [Function: JSONTYPE] },
  mariadb:
   { ENUM: [Function: ENUM],
     DATE: [Function: DATE],
     DATEONLY: [Function: DATEONLY],
     UUID: [Function: UUID],
     GEOMETRY: [Function: GEOMETRY],
     DECIMAL: [Function: DECIMAL],
     JSON: [Function: JSONTYPE] },
  sqlite:
   { DATE: [Function: DATE],
     DATEONLY: [Function: DATEONLY],
     STRING: [Function: STRING],
     CHAR: [Function: CHAR],
     NUMBER: [Function: NUMBER],
     FLOAT: { [Function: FLOAT] parse: [Function: parseFloating] },
     REAL: { [Function: REAL] parse: [Function: parseFloating] },
     'DOUBLE PRECISION': { [Function: DOUBLE] parse: [Function: parseFloating] },
     TINYINT: [Function: TINYINT],
     SMALLINT: [Function: SMALLINT],
     MEDIUMINT: [Function: MEDIUMINT],
     INTEGER: [Function: INTEGER],
     BIGINT: [Function: BIGINT],
     TEXT: [Function: TEXT],
     ENUM: [Function: ENUM],
     JSON: [Function: JSONTYPE],
     CITEXT: [Function: CITEXT] },
  mssql:
   { BLOB: [Function: BLOB],
     BOOLEAN: [Function: BOOLEAN],
     ENUM: [Function: ENUM],
     STRING: [Function: STRING],
     UUID: [Function: UUID],
     DATE: [Function: DATE],
     DATEONLY: [Function: DATEONLY],
     NOW: [Function: NOW],
     TINYINT: [Function: TINYINT],
     SMALLINT: [Function: SMALLINT],
     INTEGER: [Function: INTEGER],
     BIGINT: [Function: BIGINT],
     REAL: [Function: REAL],
     FLOAT: [Function: FLOAT],
     TEXT: [Function: TEXT] },
  Deferrable:
   { INITIALLY_DEFERRED: [Function: INITIALLY_DEFERRED],
     INITIALLY_IMMEDIATE: [Function: INITIALLY_IMMEDIATE],
     NOT: [Function: NOT],
     SET_DEFERRED: [Function: SET_DEFERRED],
     SET_IMMEDIATE: [Function: SET_IMMEDIATE] },
  Association:
   { [Function: Association]
     BelongsTo:
      { [Function: BelongsTo] BelongsTo: [Circular], default: [Circular] },
     HasOne: [Function: HasOne],
     HasMany:
      { [Function: HasMany] HasMany: [Circular], default: [Circular] },
     BelongsToMany:
      { [Function: BelongsToMany] BelongsToMany: [Circular], default: [Circular] },
     default: [Circular],
     Association: [Circular] },
  useInflection: [Function: useInflection],
  _setupHooks: [Function: _setupHooks],
  runHooks: [Function: runHooks],
  addHook: [Function: addHook],
  removeHook: [Function: removeHook],
  hasHook: [Function: hasHook],
  hasHooks: [Function: hasHook],
  beforeValidate: [Function],
  afterValidate: [Function],
  validationFailed: [Function],
  beforeCreate: [Function],
  afterCreate: [Function],
  beforeDestroy: [Function],
  afterDestroy: [Function],
  beforeRestore: [Function],
  afterRestore: [Function],
  beforeUpdate: [Function],
  afterUpdate: [Function],
  beforeSave: [Function],
  afterSave: [Function],
  beforeUpsert: [Function],
  afterUpsert: [Function],
  beforeBulkCreate: [Function],
  afterBulkCreate: [Function],
  beforeBulkDestroy: [Function],
  afterBulkDestroy: [Function],
  beforeBulkRestore: [Function],
  afterBulkRestore: [Function],
  beforeBulkUpdate: [Function],
  afterBulkUpdate: [Function],
  beforeFind: [Function],
  beforeFindAfterExpandIncludeAll: [Function],
  beforeFindAfterOptions: [Function],
  afterFind: [Function],
  beforeCount: [Function],
  beforeDefine: [Function],
  afterDefine: [Function],
  beforeInit: [Function],
  afterInit: [Function],
  beforeAssociate: [Function],
  afterAssociate: [Function],
  beforeConnect: [Function],
  afterConnect: [Function],
  beforeDisconnect: [Function],
  afterDisconnect: [Function],
  beforeSync: [Function],
  afterSync: [Function],
  beforeBulkSync: [Function],
  afterBulkSync: [Function],
  beforeQuery: [Function],
  afterQuery: [Function],
  Error: [Function: BaseError],
  BaseError: [Function: BaseError],
  AssociationError: [Function: AssociationError],
  BulkRecordError: [Function: BulkRecordError],
  ConnectionError: [Function: ConnectionError],
  DatabaseError: [Function: DatabaseError],
  EagerLoadingError: [Function: EagerLoadingError],
  EmptyResultError: [Function: EmptyResultError],
  InstanceError: [Function: InstanceError],
  OptimisticLockError: [Function: OptimisticLockError],
  QueryError: [Function: QueryError],
  SequelizeScopeError: [Function: SequelizeScopeError],
  ValidationError:
   { [Function: ValidationError]
     ValidationErrorItem:
      { [Function: ValidationErrorItem] Origins: [Object], TypeStringMap: [Object] } },
  ValidationErrorItem:
   { [Function: ValidationErrorItem]
     Origins: { CORE: 'CORE', DB: 'DB', FUNCTION: 'FUNCTION' },
     TypeStringMap:
      { 'notnull violation': 'CORE',
        'string violation': 'CORE',
        'unique violation': 'DB',
        'validation error': 'FUNCTION' } },
  AccessDeniedError: [Function: AccessDeniedError],
  ConnectionAcquireTimeoutError: [Function: ConnectionAcquireTimeoutError],
  ConnectionRefusedError: [Function: ConnectionRefusedError],
  ConnectionTimedOutError: [Function: ConnectionTimedOutError],
  HostNotFoundError: [Function: HostNotFoundError],
  HostNotReachableError: [Function: HostNotReachableError],
  InvalidConnectionError: [Function: InvalidConnectionError],
  ExclusionConstraintError: [Function: ExclusionConstraintError],
  ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
  TimeoutError: [Function: TimeoutError],
  UnknownConstraintError: [Function: UnknownConstraintError],
  UniqueConstraintError: [Function: UniqueConstraintError],
  Sequelize: [Circular],
  default: [Circular] }


